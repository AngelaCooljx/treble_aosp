From 1e09e2c9f1512932846a86e6679bc3554d6904a4 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Thu, 21 Mar 2024 16:08:36 +0200
Subject: [PATCH 07/11] Revert "[Invisalign2] Encapsulate
 tBTM_SEC_CB::AddService"

This reverts commit 94396cb21a99010a0a368e03fe513343e6f1070c.
---
 system/stack/btm/btm_sec.cc    | 117 ++++++++++++++++++++++++++++++++-
 system/stack/btm/btm_sec_cb.cc | 117 ---------------------------------
 system/stack/btm/btm_sec_cb.h  |   4 --
 3 files changed, 115 insertions(+), 123 deletions(-)

diff --git a/system/stack/btm/btm_sec.cc b/system/stack/btm/btm_sec.cc
index d162c13a97..513ce9de0b 100644
--- a/system/stack/btm/btm_sec.cc
+++ b/system/stack/btm/btm_sec.cc
@@ -404,6 +404,8 @@ void BTM_SetPinType(uint8_t pin_type, PIN_CODE pin_code, uint8_t pin_code_len) {
   memcpy(btm_sec_cb.cfg.pin_code, pin_code, pin_code_len);
 }
 
+#define BTM_NO_AVAIL_SEC_SERVICES ((uint16_t)0xffff)
+
 /*******************************************************************************
  *
  * Function         BTM_SetSecurityLevel
@@ -427,8 +429,119 @@ void BTM_SetPinType(uint8_t pin_type, PIN_CODE pin_code, uint8_t pin_code_len) {
 bool BTM_SetSecurityLevel(bool is_originator, const char* p_name,
                           uint8_t service_id, uint16_t sec_level, uint16_t psm,
                           uint32_t mx_proto_id, uint32_t mx_chan_id) {
-  return btm_sec_cb.AddService(is_originator, p_name, service_id, sec_level,
-                               psm, mx_proto_id, mx_chan_id);
+  tBTM_SEC_SERV_REC* p_srec;
+  uint16_t index;
+  uint16_t first_unused_record = BTM_NO_AVAIL_SEC_SERVICES;
+  bool record_allocated = false;
+
+  LOG_VERBOSE("sec: 0x%x", sec_level);
+
+  /* See if the record can be reused (same service name, psm, mx_proto_id,
+     service_id, and mx_chan_id), or obtain the next unused record */
+
+  p_srec = &btm_sec_cb.sec_serv_rec[0];
+
+  for (index = 0; index < BTM_SEC_MAX_SERVICE_RECORDS; index++, p_srec++) {
+    /* Check if there is already a record for this service */
+    if (p_srec->security_flags & BTM_SEC_IN_USE) {
+      if (p_srec->psm == psm && p_srec->mx_proto_id == mx_proto_id &&
+          service_id == p_srec->service_id && p_name &&
+          (!strncmp(p_name, (char*)p_srec->orig_service_name,
+                    /* strlcpy replaces end char with termination char*/
+                    BT_MAX_SERVICE_NAME_LEN - 1) ||
+           !strncmp(p_name, (char*)p_srec->term_service_name,
+                    /* strlcpy replaces end char with termination char*/
+                    BT_MAX_SERVICE_NAME_LEN - 1))) {
+        record_allocated = true;
+        break;
+      }
+    }
+    /* Mark the first available service record */
+    else if (!record_allocated) {
+      memset(p_srec, 0, sizeof(tBTM_SEC_SERV_REC));
+      record_allocated = true;
+      first_unused_record = index;
+    }
+  }
+
+  if (!record_allocated) {
+    LOG_WARN("BTM_SEC_REG: Out of Service Records (%d)",
+             BTM_SEC_MAX_SERVICE_RECORDS);
+    return (record_allocated);
+  }
+
+  /* Process the request if service record is valid */
+  /* If a duplicate service wasn't found, use the first available */
+  if (index >= BTM_SEC_MAX_SERVICE_RECORDS) {
+    index = first_unused_record;
+    p_srec = &btm_sec_cb.sec_serv_rec[index];
+  }
+
+  p_srec->psm = psm;
+  p_srec->service_id = service_id;
+  p_srec->mx_proto_id = mx_proto_id;
+
+  if (is_originator) {
+    p_srec->orig_mx_chan_id = mx_chan_id;
+    strlcpy((char*)p_srec->orig_service_name, p_name,
+            BT_MAX_SERVICE_NAME_LEN + 1);
+    /* clear out the old setting, just in case it exists */
+    {
+      p_srec->security_flags &=
+          ~(BTM_SEC_OUT_ENCRYPT | BTM_SEC_OUT_AUTHENTICATE | BTM_SEC_OUT_MITM);
+    }
+
+    /* Parameter validation.  Originator should not set requirements for
+     * incoming connections */
+    sec_level &= ~(BTM_SEC_IN_ENCRYPT | BTM_SEC_IN_AUTHENTICATE |
+                   BTM_SEC_IN_MITM | BTM_SEC_IN_MIN_16_DIGIT_PIN);
+
+    if (btm_sec_cb.security_mode == BTM_SEC_MODE_SP ||
+        btm_sec_cb.security_mode == BTM_SEC_MODE_SC) {
+      if (sec_level & BTM_SEC_OUT_AUTHENTICATE) sec_level |= BTM_SEC_OUT_MITM;
+    }
+
+    /* Make sure the authenticate bit is set, when encrypt bit is set */
+    if (sec_level & BTM_SEC_OUT_ENCRYPT) sec_level |= BTM_SEC_OUT_AUTHENTICATE;
+
+    /* outgoing connections usually set the security level right before
+     * the connection is initiated.
+     * set it to be the outgoing service */
+    btm_sec_cb.p_out_serv = p_srec;
+  } else {
+    p_srec->term_mx_chan_id = mx_chan_id;
+    strlcpy((char*)p_srec->term_service_name, p_name,
+            BT_MAX_SERVICE_NAME_LEN + 1);
+    /* clear out the old setting, just in case it exists */
+    {
+      p_srec->security_flags &=
+          ~(BTM_SEC_IN_ENCRYPT | BTM_SEC_IN_AUTHENTICATE | BTM_SEC_IN_MITM |
+            BTM_SEC_IN_MIN_16_DIGIT_PIN);
+    }
+
+    /* Parameter validation.  Acceptor should not set requirements for outgoing
+     * connections */
+    sec_level &=
+        ~(BTM_SEC_OUT_ENCRYPT | BTM_SEC_OUT_AUTHENTICATE | BTM_SEC_OUT_MITM);
+
+    if (btm_sec_cb.security_mode == BTM_SEC_MODE_SP ||
+        btm_sec_cb.security_mode == BTM_SEC_MODE_SC) {
+      if (sec_level & BTM_SEC_IN_AUTHENTICATE) sec_level |= BTM_SEC_IN_MITM;
+    }
+
+    /* Make sure the authenticate bit is set, when encrypt bit is set */
+    if (sec_level & BTM_SEC_IN_ENCRYPT) sec_level |= BTM_SEC_IN_AUTHENTICATE;
+  }
+
+  p_srec->security_flags |= (uint16_t)(sec_level | BTM_SEC_IN_USE);
+
+  LOG_DEBUG(
+      "[%d]: id:%d, is_orig:%s psm:0x%04x proto_id:%d chan_id:%d"
+      "  : sec:0x%x service_name:[%s] (up to %d chars saved)",
+      index, service_id, logbool(is_originator).c_str(), psm, mx_proto_id,
+      mx_chan_id, p_srec->security_flags, p_name, BT_MAX_SERVICE_NAME_LEN);
+
+  return (record_allocated);
 }
 
 /*******************************************************************************
diff --git a/system/stack/btm/btm_sec_cb.cc b/system/stack/btm/btm_sec_cb.cc
index 1ecdaa9ce2..db3c0d06ce 100644
--- a/system/stack/btm/btm_sec_cb.cc
+++ b/system/stack/btm/btm_sec_cb.cc
@@ -187,120 +187,3 @@ bool tBTM_SEC_CB::IsLinkKeyKnown(const RawAddress bd_addr,
   LOG_ERROR("unknown device:%s", ADDRESS_TO_LOGGABLE_CSTR(bd_addr));
   return false;
 }
-
-#define BTM_NO_AVAIL_SEC_SERVICES ((uint16_t)0xffff)
-bool tBTM_SEC_CB::AddService(bool is_originator, const char* p_name,
-                             uint8_t service_id, uint16_t sec_level,
-                             uint16_t psm, uint32_t mx_proto_id,
-                             uint32_t mx_chan_id) {
-  tBTM_SEC_SERV_REC* p_srec;
-  uint16_t index;
-  uint16_t first_unused_record = BTM_NO_AVAIL_SEC_SERVICES;
-  bool record_allocated = false;
-
-  LOG_VERBOSE("sec_level:0x%x", sec_level);
-
-  /* See if the record can be reused (same service name, psm, mx_proto_id,
-     service_id, and mx_chan_id), or obtain the next unused record */
-
-  p_srec = &sec_serv_rec[0];
-
-  for (index = 0; index < BTM_SEC_MAX_SERVICE_RECORDS; index++, p_srec++) {
-    /* Check if there is already a record for this service */
-    if (p_srec->security_flags & BTM_SEC_IN_USE) {
-      if (p_srec->psm == psm && p_srec->mx_proto_id == mx_proto_id &&
-          service_id == p_srec->service_id && p_name &&
-          (!strncmp(p_name, (char*)p_srec->orig_service_name,
-                    /* strlcpy replaces end char with termination char*/
-                    BT_MAX_SERVICE_NAME_LEN - 1) ||
-           !strncmp(p_name, (char*)p_srec->term_service_name,
-                    /* strlcpy replaces end char with termination char*/
-                    BT_MAX_SERVICE_NAME_LEN - 1))) {
-        record_allocated = true;
-        break;
-      }
-    }
-    /* Mark the first available service record */
-    else if (!record_allocated) {
-      *p_srec = {};
-      record_allocated = true;
-      first_unused_record = index;
-    }
-  }
-
-  if (!record_allocated) {
-    LOG_WARN("Out of Service Records (%d)", BTM_SEC_MAX_SERVICE_RECORDS);
-    return (record_allocated);
-  }
-
-  /* Process the request if service record is valid */
-  /* If a duplicate service wasn't found, use the first available */
-  if (index >= BTM_SEC_MAX_SERVICE_RECORDS) {
-    index = first_unused_record;
-    p_srec = &sec_serv_rec[index];
-  }
-
-  p_srec->psm = psm;
-  p_srec->service_id = service_id;
-  p_srec->mx_proto_id = mx_proto_id;
-
-  if (is_originator) {
-    p_srec->orig_mx_chan_id = mx_chan_id;
-    strlcpy((char*)p_srec->orig_service_name, p_name,
-            BT_MAX_SERVICE_NAME_LEN + 1);
-    /* clear out the old setting, just in case it exists */
-    {
-      p_srec->security_flags &=
-          ~(BTM_SEC_OUT_ENCRYPT | BTM_SEC_OUT_AUTHENTICATE | BTM_SEC_OUT_MITM);
-    }
-
-    /* Parameter validation.  Originator should not set requirements for
-     * incoming connections */
-    sec_level &= ~(BTM_SEC_IN_ENCRYPT | BTM_SEC_IN_AUTHENTICATE |
-                   BTM_SEC_IN_MITM | BTM_SEC_IN_MIN_16_DIGIT_PIN);
-
-    if (security_mode == BTM_SEC_MODE_SP || security_mode == BTM_SEC_MODE_SC) {
-      if (sec_level & BTM_SEC_OUT_AUTHENTICATE) sec_level |= BTM_SEC_OUT_MITM;
-    }
-
-    /* Make sure the authenticate bit is set, when encrypt bit is set */
-    if (sec_level & BTM_SEC_OUT_ENCRYPT) sec_level |= BTM_SEC_OUT_AUTHENTICATE;
-
-    /* outgoing connections usually set the security level right before
-     * the connection is initiated.
-     * set it to be the outgoing service */
-    p_out_serv = p_srec;
-  } else {
-    p_srec->term_mx_chan_id = mx_chan_id;
-    strlcpy((char*)p_srec->term_service_name, p_name,
-            BT_MAX_SERVICE_NAME_LEN + 1);
-    /* clear out the old setting, just in case it exists */
-    {
-      p_srec->security_flags &=
-          ~(BTM_SEC_IN_ENCRYPT | BTM_SEC_IN_AUTHENTICATE | BTM_SEC_IN_MITM |
-            BTM_SEC_IN_MIN_16_DIGIT_PIN);
-    }
-
-    /* Parameter validation.  Acceptor should not set requirements for outgoing
-     * connections */
-    sec_level &=
-        ~(BTM_SEC_OUT_ENCRYPT | BTM_SEC_OUT_AUTHENTICATE | BTM_SEC_OUT_MITM);
-
-    if (security_mode == BTM_SEC_MODE_SP || security_mode == BTM_SEC_MODE_SC) {
-      if (sec_level & BTM_SEC_IN_AUTHENTICATE) sec_level |= BTM_SEC_IN_MITM;
-    }
-
-    /* Make sure the authenticate bit is set, when encrypt bit is set */
-    if (sec_level & BTM_SEC_IN_ENCRYPT) sec_level |= BTM_SEC_IN_AUTHENTICATE;
-  }
-
-  p_srec->security_flags |= (uint16_t)(sec_level | BTM_SEC_IN_USE);
-
-  LOG_DEBUG(
-      "[%d]: id:%d, is_orig:%s psm:0x%04x proto_id:%d chan_id:%d"
-      "  : sec:0x%x service_name:[%s] (up to %d chars saved)",
-      index, service_id, logbool(is_originator).c_str(), psm, mx_proto_id,
-      mx_chan_id, p_srec->security_flags, p_name, BT_MAX_SERVICE_NAME_LEN);
-
-  return (record_allocated);
-}
diff --git a/system/stack/btm/btm_sec_cb.h b/system/stack/btm/btm_sec_cb.h
index 2482ccdd55..8c7a3d9712 100644
--- a/system/stack/btm/btm_sec_cb.h
+++ b/system/stack/btm/btm_sec_cb.h
@@ -92,10 +92,6 @@ class tBTM_SEC_CB {
   bool IsLinkKeyKnown(const RawAddress bd_addr, tBT_TRANSPORT transport);
 
   tBTM_SEC_REC* getSecRec(const RawAddress bd_addr);
-
-  bool AddService(bool is_originator, const char* p_name, uint8_t service_id,
-                  uint16_t sec_level, uint16_t psm, uint32_t mx_proto_id,
-                  uint32_t mx_chan_id);
 };
 
 extern tBTM_SEC_CB btm_sec_cb;
-- 
2.34.1

