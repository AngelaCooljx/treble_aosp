From 067e952eddbe820aab906f3c379f24cef8d905cd Mon Sep 17 00:00:00 2001
From: Alberto Ponces <ponces26@gmail.com>
Date: Wed, 22 Feb 2023 21:23:56 +0000
Subject: [PATCH 3/4] Spoof Pixel XL for Google Photos

Change-Id: Iec080942c21b93a5b98df91e34ac253cb1a5205c
---
 core/java/android/app/Instrumentation.java | 25 ++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java
index 556058b567f9..6b7826853121 100644
--- a/core/java/android/app/Instrumentation.java
+++ b/core/java/android/app/Instrumentation.java
@@ -60,6 +60,7 @@ import com.android.internal.content.ReferrerIntent;
 import java.io.File;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeoutException;
@@ -1242,6 +1243,8 @@ public class Instrumentation {
         Application app = getFactory(context.getPackageName())
                 .instantiateApplication(cl, className);
         app.attach(context);
+        String packageName = context.getPackageName();
+        if (packageName.equals("com.google.android.apps.photos")) spoofGooglePhotos();
         return app;
     }
     
@@ -1259,9 +1262,31 @@ public class Instrumentation {
             ClassNotFoundException {
         Application app = (Application)clazz.newInstance();
         app.attach(context);
+        String packageName = context.getPackageName();
+        if (packageName.equals("com.google.android.apps.photos")) spoofGooglePhotos();
         return app;
     }
 
+    private static void spoofGooglePhotos() {
+        setPropValue("BRAND", "google");
+        setPropValue("MANUFACTURER", "Google");
+        setPropValue("DEVICE", "marlin");
+        setPropValue("PRODUCT", "marlin");
+        setPropValue("MODEL", "Pixel XL");
+        setPropValue("FINGERPRINT", "google/marlin/marlin:10/QP1A.191005.007.A3/5972272:user/release-keys");
+    }
+
+    private static void setPropValue(String key, Object value) {
+        try {
+            Field field = Build.class.getDeclaredField(key);
+            field.setAccessible(true);
+            field.set(null, value);
+            field.setAccessible(false);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            Log.e(TAG, "Failed to set prop " + key, e);
+        }
+    }
+
     /**
      * Perform calling of the application's {@link Application#onCreate}
      * method.  The default implementation simply calls through to that method.
-- 
2.34.1

