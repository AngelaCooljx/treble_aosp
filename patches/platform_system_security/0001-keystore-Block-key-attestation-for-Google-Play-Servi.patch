From 1204ae8cbfcad6ce7edbd1a848c7b7b7d4cd95ab Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Wed Jan 13 02:05:05 2021 -0800
Subject: [PATCH] keystore: Block key attestation for Google Play Services

In order to enforce SafetyNet security, Google Play Services is now
using hardware attestation for ctsProfile validation in all cases, even
when basic attestation is selected. The SafetyNet API response from GMS
will report that basic attestation was used, but under the hood,
hardware attestation is always used regardless of the reported state.
This results in SafetyNet failing to pass due to TrustZone reporting an
unlocked bootloader (and a partially invalidated root of trust) in the
key attestation result.

We can still take advantage of the fact that this usage of hardware
attestation is opportunistic - that is, it falls back to basic
attestation if key attestation fails to run - and prevent GMS from using
key attestation at the framework level. This causes it to gracefully
fall back to basic attestation and pass SafetyNet with an unlocked
bootloader.

Key attestation is still available for other apps, as there are valid
uses for it that do not involve SafetyNet.

The "not implemented" error code from keymaster is used to simulate the
most realistic failure condition to evade detection, i.e. an old device
that lacks support for key attestation.

Change-Id: Iba5fe0791622839e1bad4730593a319ea03661f2
---
 identity/WritableCredential.cpp      | 12 +++++++++---
 keystore/keystore_attestation_id.cpp |  6 ++++++
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/identity/WritableCredential.cpp b/identity/WritableCredential.cpp
index 9827d75..48ecc07 100644
--- a/identity/WritableCredential.cpp
+++ b/identity/WritableCredential.cpp
@@ -24,6 +24,8 @@
 #include <cppbor_parse.h>
 #include <keystore/keystore_attestation_id.h>
 
+#include <hardware/keymaster_defs.h>
+
 #include "CredentialData.h"
 #include "Util.h"
 #include "WritableCredential.h"
@@ -59,9 +61,13 @@ Status WritableCredential::ensureAttestationCertificateExists(const vector<uint8
     const int32_t callingUid = IPCThreadState::self()->getCallingUid();
     auto asn1AttestationId = android::security::gather_attestation_application_id(callingUid);
     if (!asn1AttestationId.isOk()) {
-        LOG(ERROR) << "Failed gathering AttestionApplicationId";
-        return Status::fromServiceSpecificError(ICredentialStore::ERROR_GENERIC,
-                                                "Failed gathering AttestionApplicationId");
+        if (asn1AttestationId.status() == KM_ERROR_UNIMPLEMENTED) {
+            return KeyStoreServiceReturnCode(KM_ERROR_UNIMPLEMENTED);
+        } else {
+            LOG(ERROR) << "Failed gathering AttestionApplicationId";
+            return Status::fromServiceSpecificError(ICredentialStore::ERROR_GENERIC,
+                                                    "Failed gathering AttestionApplicationId");
+        }
     }
 
     vector<Certificate> certificateChain;
diff --git a/keystore/keystore_attestation_id.cpp b/keystore/keystore_attestation_id.cpp
index ccd3808..6fe0d75 100644
--- a/keystore/keystore_attestation_id.cpp
+++ b/keystore/keystore_attestation_id.cpp
@@ -35,6 +35,8 @@
 #include <keystore/KeyAttestationPackageInfo.h>
 #include <keystore/Signature.h>
 
+#include <hardware/keymaster_defs.h>
+
 #include <private/android_filesystem_config.h> /* for AID_SYSTEM */
 
 #include <openssl/asn1t.h>
@@ -210,6 +212,10 @@ build_attestation_application_id(const KeyAttestationApplicationId& key_attestat
             return BAD_VALUE;
         }
         std::string package_name(String8(*pinfo->package_name()).string());
+        // Prevent Google Play Services from using key attestation for SafetyNet
+        if (package_name == "com.google.android.gms") {
+            return KM_ERROR_UNIMPLEMENTED;
+        }
         std::unique_ptr<KM_ATTESTATION_PACKAGE_INFO> attestation_package_info;
         auto rc = build_attestation_package_info(*pinfo, &attestation_package_info);
         if (rc != NO_ERROR) {
-- 
2.25.1

