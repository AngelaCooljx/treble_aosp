From adab531cf05474a4f89a233c44ba43cbcbb0bb16 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Thu, 21 Mar 2024 16:08:51 +0200
Subject: [PATCH 08/11] Revert "[Invisalign2] Encapsulate the following
 methods"

This reverts commit 5e2b41b9f26319c3da87788d6a08a945562d0efe.
---
 system/bta/test/common/btm_api_mock.cc |  8 +++
 system/stack/btm/btm_sec.cc            | 43 ++++++++++++--
 system/stack/btm/btm_sec.h             | 13 ++++
 system/stack/btm/btm_sec_cb.cc         | 82 +-------------------------
 system/stack/btm/btm_sec_cb.h          |  8 ---
 system/test/mock/mock_stack_btm_sec.cc |  9 +++
 system/test/mock/mock_stack_btm_sec.h  | 16 +++++
 7 files changed, 86 insertions(+), 93 deletions(-)

diff --git a/system/bta/test/common/btm_api_mock.cc b/system/bta/test/common/btm_api_mock.cc
index 05599ab5a2..1682ff9ae4 100644
--- a/system/bta/test/common/btm_api_mock.cc
+++ b/system/bta/test/common/btm_api_mock.cc
@@ -30,6 +30,14 @@ void bluetooth::manager::SetMockBtmInterface(
   btm_interface = mock_btm_interface;
 }
 
+bool BTM_GetSecurityFlagsByTransport(const RawAddress& bd_addr,
+                                     uint8_t* p_sec_flags,
+                                     tBT_TRANSPORT transport) {
+  LOG_ASSERT(btm_interface) << "Mock btm interface not set!";
+  return btm_interface->GetSecurityFlagsByTransport(bd_addr, p_sec_flags,
+                                                    transport);
+}
+
 bool BTM_IsLinkKeyKnown(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
   LOG_ASSERT(btm_interface) << "Mock btm interface not set!";
   return btm_interface->IsLinkKeyKnown(bd_addr, transport);
diff --git a/system/stack/btm/btm_sec.cc b/system/stack/btm/btm_sec.cc
index 513ce9de0b..cdb18ee4e6 100644
--- a/system/stack/btm/btm_sec.cc
+++ b/system/stack/btm/btm_sec.cc
@@ -352,19 +352,27 @@ bool BTM_SecDeleteRmtNameNotifyCallback(tBTM_RMT_NAME_CALLBACK* p_callback) {
 }
 
 bool BTM_IsEncrypted(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
-  return btm_sec_cb.IsDeviceEncrypted(bd_addr, transport);
+  uint8_t flags = 0;
+  BTM_GetSecurityFlagsByTransport(bd_addr, &flags, transport);
+  return (flags & BTM_SEC_FLAG_ENCRYPTED) != 0;
 }
 
 bool BTM_IsLinkKeyAuthed(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
-  return btm_sec_cb.IsLinkKeyAuthenticated(bd_addr, transport);
+  uint8_t flags = 0;
+  BTM_GetSecurityFlagsByTransport(bd_addr, &flags, transport);
+  return (flags & BTM_SEC_FLAG_LKEY_AUTHED) != 0;
 }
 
 bool BTM_IsLinkKeyKnown(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
-  return btm_sec_cb.IsLinkKeyKnown(bd_addr, transport);
+  uint8_t flags = 0;
+  BTM_GetSecurityFlagsByTransport(bd_addr, &flags, transport);
+  return (flags & BTM_SEC_FLAG_LKEY_KNOWN) != 0;
 }
 
 bool BTM_IsAuthenticated(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
-  return btm_sec_cb.IsDeviceAuthenticated(bd_addr, transport);
+  uint8_t flags = 0;
+  BTM_GetSecurityFlagsByTransport(bd_addr, &flags, transport);
+  return (flags & BTM_SEC_AUTHENTICATED) != 0;
 }
 
 bool BTM_CanReadDiscoverableCharacteristics(const RawAddress& bd_addr) {
@@ -379,6 +387,33 @@ bool BTM_CanReadDiscoverableCharacteristics(const RawAddress& bd_addr) {
   }
 }
 
+/*******************************************************************************
+ *
+ * Function         BTM_GetSecurityFlagsByTransport
+ *
+ * Description      Get security flags for the device on a particular transport
+ *
+ * Returns          bool    true or false is device found
+ *
+ ******************************************************************************/
+bool BTM_GetSecurityFlagsByTransport(const RawAddress& bd_addr,
+                                     uint8_t* p_sec_flags,
+                                     tBT_TRANSPORT transport) {
+  tBTM_SEC_DEV_REC* p_dev_rec;
+
+  p_dev_rec = btm_find_dev(bd_addr);
+  if (p_dev_rec != NULL) {
+    if (transport == BT_TRANSPORT_BR_EDR)
+      *p_sec_flags = (uint8_t)p_dev_rec->sec_rec.sec_flags;
+    else
+      *p_sec_flags = (uint8_t)(p_dev_rec->sec_rec.sec_flags >> 8);
+
+    return (true);
+  }
+  LOG_ERROR("BTM_GetSecurityFlags false");
+  return (false);
+}
+
 /*******************************************************************************
  *
  * Function         BTM_SetPinType
diff --git a/system/stack/btm/btm_sec.h b/system/stack/btm/btm_sec.h
index 05938e2ee2..fcde316559 100644
--- a/system/stack/btm/btm_sec.h
+++ b/system/stack/btm/btm_sec.h
@@ -79,6 +79,19 @@ bool BTM_SecAddRmtNameNotifyCallback(tBTM_RMT_NAME_CALLBACK* p_callback);
  ******************************************************************************/
 bool BTM_SecDeleteRmtNameNotifyCallback(tBTM_RMT_NAME_CALLBACK* p_callback);
 
+/*******************************************************************************
+ *
+ * Function         BTM_GetSecurityFlagsByTransport
+ *
+ * Description      Get security flags for the device on a particular transport
+ *
+ * Returns          bool    true or false is device found
+ *
+ ******************************************************************************/
+bool BTM_GetSecurityFlagsByTransport(const RawAddress& bd_addr,
+                                     uint8_t* p_sec_flags,
+                                     tBT_TRANSPORT transport);
+
 bool BTM_IsEncrypted(const RawAddress& bd_addr, tBT_TRANSPORT transport);
 bool BTM_IsLinkKeyAuthed(const RawAddress& bd_addr, tBT_TRANSPORT transport);
 bool BTM_IsLinkKeyKnown(const RawAddress& bd_addr, tBT_TRANSPORT transport);
diff --git a/system/stack/btm/btm_sec_cb.cc b/system/stack/btm/btm_sec_cb.cc
index db3c0d06ce..8cf04435e8 100644
--- a/system/stack/btm/btm_sec_cb.cc
+++ b/system/stack/btm/btm_sec_cb.cc
@@ -15,18 +15,14 @@
  *
  */
 
-#define LOG_TAG "SEC_CB"
-
 #include "stack/btm/btm_sec_cb.h"
 
 #include <cstdint>
 
 #include "internal_include/stack_config.h"
-#include "os/log.h"
 #include "osi/include/allocator.h"
 #include "osi/include/fixed_queue.h"
 #include "osi/include/list.h"
-#include "stack/btm/btm_dev.h"
 #include "stack/btm/security_device_record.h"
 #include "types/raw_address.h"
 
@@ -110,80 +106,4 @@ tBTM_SEC_SERV_REC* tBTM_SEC_CB::find_first_serv_rec(bool is_originator,
       return (p_serv_rec);
   }
   return (NULL);
-}
-
-tBTM_SEC_REC* tBTM_SEC_CB::getSecRec(const RawAddress bd_addr) {
-  tBTM_SEC_DEV_REC* p_dev_rec = btm_find_dev(bd_addr);
-  if (p_dev_rec) {
-    return &p_dev_rec->sec_rec;
-  }
-  return nullptr;
-}
-
-bool tBTM_SEC_CB::IsDeviceEncrypted(const RawAddress bd_addr,
-                                    tBT_TRANSPORT transport) {
-  tBTM_SEC_REC* sec_rec = getSecRec(bd_addr);
-  if (sec_rec) {
-    if (transport == BT_TRANSPORT_BR_EDR) {
-      return sec_rec->is_device_encrypted();
-    } else if (transport == BT_TRANSPORT_LE) {
-      return sec_rec->is_le_device_encrypted();
-    }
-    LOG_ERROR("unknown transport:%s", bt_transport_text(transport).c_str());
-    return false;
-  }
-
-  LOG_ERROR("unknown device:%s", ADDRESS_TO_LOGGABLE_CSTR(bd_addr));
-  return false;
-}
-
-bool tBTM_SEC_CB::IsLinkKeyAuthenticated(const RawAddress bd_addr,
-                                         tBT_TRANSPORT transport) {
-  tBTM_SEC_REC* sec_rec = getSecRec(bd_addr);
-  if (sec_rec) {
-    if (transport == BT_TRANSPORT_BR_EDR) {
-      return sec_rec->is_link_key_authenticated();
-    } else if (transport == BT_TRANSPORT_LE) {
-      return sec_rec->is_le_link_key_authenticated();
-    }
-    LOG_ERROR("unknown transport:%s", bt_transport_text(transport).c_str());
-    return false;
-  }
-
-  LOG_ERROR("unknown device:%s", ADDRESS_TO_LOGGABLE_CSTR(bd_addr));
-  return false;
-}
-
-bool tBTM_SEC_CB::IsDeviceAuthenticated(const RawAddress bd_addr,
-                                        tBT_TRANSPORT transport) {
-  tBTM_SEC_REC* sec_rec = getSecRec(bd_addr);
-  if (sec_rec) {
-    if (transport == BT_TRANSPORT_BR_EDR) {
-      return sec_rec->is_device_authenticated();
-    } else if (transport == BT_TRANSPORT_LE) {
-      return sec_rec->is_le_device_authenticated();
-    }
-    LOG_ERROR("unknown transport:%s", bt_transport_text(transport).c_str());
-    return false;
-  }
-
-  LOG_ERROR("unknown device:%s", ADDRESS_TO_LOGGABLE_CSTR(bd_addr));
-  return false;
-}
-
-bool tBTM_SEC_CB::IsLinkKeyKnown(const RawAddress bd_addr,
-                                 tBT_TRANSPORT transport) {
-  tBTM_SEC_REC* sec_rec = getSecRec(bd_addr);
-  if (sec_rec) {
-    if (transport == BT_TRANSPORT_BR_EDR) {
-      return sec_rec->is_link_key_known();
-    } else if (transport == BT_TRANSPORT_LE) {
-      return sec_rec->is_le_link_key_known();
-    }
-    LOG_ERROR("unknown transport:%s", bt_transport_text(transport).c_str());
-    return false;
-  }
-
-  LOG_ERROR("unknown device:%s", ADDRESS_TO_LOGGABLE_CSTR(bd_addr));
-  return false;
-}
+}
\ No newline at end of file
diff --git a/system/stack/btm/btm_sec_cb.h b/system/stack/btm/btm_sec_cb.h
index 8c7a3d9712..1319eb3835 100644
--- a/system/stack/btm/btm_sec_cb.h
+++ b/system/stack/btm/btm_sec_cb.h
@@ -84,14 +84,6 @@ class tBTM_SEC_CB {
   void Free();
 
   tBTM_SEC_SERV_REC* find_first_serv_rec(bool is_originator, uint16_t psm);
-
-  bool IsDeviceEncrypted(const RawAddress bd_addr, tBT_TRANSPORT transport);
-  bool IsDeviceAuthenticated(const RawAddress bd_addr, tBT_TRANSPORT transport);
-  bool IsLinkKeyAuthenticated(const RawAddress bd_addr,
-                              tBT_TRANSPORT transport);
-  bool IsLinkKeyKnown(const RawAddress bd_addr, tBT_TRANSPORT transport);
-
-  tBTM_SEC_REC* getSecRec(const RawAddress bd_addr);
 };
 
 extern tBTM_SEC_CB btm_sec_cb;
diff --git a/system/test/mock/mock_stack_btm_sec.cc b/system/test/mock/mock_stack_btm_sec.cc
index 7bea456324..69ffce768d 100644
--- a/system/test/mock/mock_stack_btm_sec.cc
+++ b/system/test/mock/mock_stack_btm_sec.cc
@@ -46,6 +46,7 @@ struct BTM_CanReadDiscoverableCharacteristics
 struct BTM_ConfirmReqReply BTM_ConfirmReqReply;
 struct BTM_GetClockOffset BTM_GetClockOffset;
 struct BTM_GetPeerDeviceTypeFromFeatures BTM_GetPeerDeviceTypeFromFeatures;
+struct BTM_GetSecurityFlagsByTransport BTM_GetSecurityFlagsByTransport;
 struct BTM_IsAuthenticated BTM_IsAuthenticated;
 struct BTM_IsEncrypted BTM_IsEncrypted;
 struct BTM_IsLinkKeyAuthed BTM_IsLinkKeyAuthed;
@@ -121,6 +122,7 @@ bool BTM_BothEndsSupportSecureConnections::return_value = false;
 bool BTM_CanReadDiscoverableCharacteristics::return_value = false;
 uint16_t BTM_GetClockOffset::return_value = 0;
 tBT_DEVICE_TYPE BTM_GetPeerDeviceTypeFromFeatures::return_value = 0;
+bool BTM_GetSecurityFlagsByTransport::return_value = false;
 bool BTM_IsAuthenticated::return_value = false;
 bool BTM_IsEncrypted::return_value = false;
 bool BTM_IsLinkKeyAuthed::return_value = false;
@@ -174,6 +176,13 @@ tBT_DEVICE_TYPE BTM_GetPeerDeviceTypeFromFeatures(const RawAddress& bd_addr) {
   inc_func_call_count(__func__);
   return test::mock::stack_btm_sec::BTM_GetPeerDeviceTypeFromFeatures(bd_addr);
 }
+bool BTM_GetSecurityFlagsByTransport(const RawAddress& bd_addr,
+                                     uint8_t* p_sec_flags,
+                                     tBT_TRANSPORT transport) {
+  inc_func_call_count(__func__);
+  return test::mock::stack_btm_sec::BTM_GetSecurityFlagsByTransport(
+      bd_addr, p_sec_flags, transport);
+}
 bool BTM_IsAuthenticated(const RawAddress& bd_addr, tBT_TRANSPORT transport) {
   inc_func_call_count(__func__);
   return test::mock::stack_btm_sec::BTM_IsAuthenticated(bd_addr, transport);
diff --git a/system/test/mock/mock_stack_btm_sec.h b/system/test/mock/mock_stack_btm_sec.h
index 824c7b2047..f070cde0d6 100644
--- a/system/test/mock/mock_stack_btm_sec.h
+++ b/system/test/mock/mock_stack_btm_sec.h
@@ -109,6 +109,22 @@ struct BTM_GetPeerDeviceTypeFromFeatures {
 extern struct BTM_GetPeerDeviceTypeFromFeatures
     BTM_GetPeerDeviceTypeFromFeatures;
 
+// Name: BTM_GetSecurityFlagsByTransport
+// Params: const RawAddress& bd_addr, uint8_t* p_sec_flags, tBT_TRANSPORT
+// transport Return: bool
+struct BTM_GetSecurityFlagsByTransport {
+  static bool return_value;
+  std::function<bool(const RawAddress& bd_addr, uint8_t* p_sec_flags,
+                     tBT_TRANSPORT transport)>
+      body{[](const RawAddress& /* bd_addr */, uint8_t* /* p_sec_flags */,
+              tBT_TRANSPORT /* transport */) { return return_value; }};
+  bool operator()(const RawAddress& bd_addr, uint8_t* p_sec_flags,
+                  tBT_TRANSPORT transport) {
+    return body(bd_addr, p_sec_flags, transport);
+  };
+};
+extern struct BTM_GetSecurityFlagsByTransport BTM_GetSecurityFlagsByTransport;
+
 // Name: BTM_IsAuthenticated
 // Params: const RawAddress& bd_addr, tBT_TRANSPORT transport
 // Return: bool
-- 
2.34.1

